[project]
name = "pdf-viewer-backend"
version = "0.1.0"
description = "FastAPI backend for PDF viewer POC"
authors = [
    {name = "Dominic Fahey", email = "dominic@example.com"},
]
dependencies = [
    "fastapi>=0.104.0",
    "uvicorn[standard]>=0.24.0",
    "python-multipart>=0.0.6",
    "pydantic>=2.5.0",
    "pypdf>=3.17.0",
    "python-magic>=0.4.27",
    "python-magic-bin>=0.4.14; sys_platform == 'win32'",
    "aiofiles>=23.2.1",
    "requests>=2.31.0",
    "structlog>=23.2.0",
    "rich>=13.7.0",
    "types-requests>=2.32.4.20250611",
]
requires-python = ">=3.11"
readme = "../README.md"
license = {text = "MIT"}

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-xdist>=3.3.1",
    "pytest-benchmark>=4.0.0",
    "httpx>=0.25.0",
    "ruff>=0.1.0",
    "black>=23.9.0",
    "mypy>=1.6.0",
    "factory-boy>=3.3.0",
    "faker>=19.6.0",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["backend"]

[tool.ruff]
target-version = "py311"
line-length = 88

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
    "B904",  # raise without from clause
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]

[tool.black]
target-version = ['py39']
line-length = 88
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.mypy]
python_version = "3.11"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
ignore_missing_imports = true
explicit_package_bases = true
namespace_packages = true
exclude = [
    "tests/integration/fixtures/generate_fixtures.py",
    "scripts/",
]

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false
check_untyped_defs = false
disable_error_code = ["no-untyped-def", "index", "misc", "union-attr", "return-value"]

[[tool.mypy.overrides]]
module = "backend.app.middleware.*"
disallow_untyped_defs = false
check_untyped_defs = false
disable_error_code = ["no-untyped-def", "type-arg", "assignment", "unused-ignore"]

[[tool.mypy.overrides]]
module = "backend.app.core.logging"
disallow_untyped_defs = false
check_untyped_defs = false
disable_error_code = ["no-untyped-def"]

[[tool.mypy.overrides]]
module = "backend.app.utils.logger"
disallow_untyped_defs = false
check_untyped_defs = false
disable_error_code = ["no-untyped-def"]

[[tool.mypy.overrides]]
module = "backend.app.utils.api_logging"
disallow_untyped_defs = false
check_untyped_defs = false
disable_error_code = ["no-untyped-def", "type-arg", "assignment"]

[[tool.mypy.overrides]]
module = "backend.app.models.pdf"
disallow_untyped_defs = false

[tool.pytest.ini_options]
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"
testpaths = ["../tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--cov=backend.app",
    "--cov-report=term-missing",
    "--cov-report=html:../artifacts/htmlcov",
    "--cov-report=xml:../artifacts/coverage.xml",
    "--cov-fail-under=80",
]

[tool.coverage.run]
source = ["../backend/app"]
omit = [
    "*/tests/*",
    "*/__pycache__/*",
    "*/migrations/*",
    "*/__init__.py",
    "*/conftest.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
]
show_missing = true
precision = 2

[tool.coverage.html]
directory = "../artifacts/htmlcov"
